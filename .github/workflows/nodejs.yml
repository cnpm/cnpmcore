# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test-postgresql-fs-nfs:
    runs-on: ${{ matrix.os }}

    services:
      # https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        # https://docs.github.com/en/actions/using-containerized-services/about-service-containers#example-mapping-redis-ports
        image: redis
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22, 24]
        os: [ubuntu-latest]

    steps:
      - name: Checkout Git Source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm i -g utoo && utoo

      # https://github.com/elastic/elastic-github-actions/blob/master/elasticsearch/README.md
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Runs Elasticsearch
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 8.18.0
          security-enabled: false

      - name: Wait for Elasticsearch to be ready
        run: |
          curl -v http://localhost:9200
          while ! curl -s http://localhost:9200 | grep -q "elasticsearch"; do
            echo "Waiting for Elasticsearch to be ready..."
            sleep 1
          done

      - name: Continuous Integration
        run: npm run ci:postgresql
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          CNPMCORE_CONFIG_ENABLE_ES: true
          CNPMCORE_CONFIG_ES_CLIENT_NODES: http://localhost:9200

      - name: Code Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-mysql57-fs-nfs:
    runs-on: ${{ matrix.os }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: cnpmcore_unittest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        # https://docs.github.com/en/actions/using-containerized-services/about-service-containers#example-mapping-redis-ports
        image: redis
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22, 24]
        os: [ubuntu-latest]

    steps:
      - name: Checkout Git Source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm i -g utoo && utoo

      - name: Continuous Integration
        run: npm run ci

      - name: Code Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-mysql57-s3-nfs:
    runs-on: ${{ matrix.os }}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: cnpmcore_unittest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
        os: [ubuntu-latest]

    steps:
      - name: Checkout Git Source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm i

      - name: Continuous Integration
        run: npm run ci "test/cli/npm/install.test.ts"
        env:
          CNPMCORE_NFS_TYPE: s3
          CNPMCORE_NFS_REMOVE_BEFORE_UPLOAD: true
          CNPMCORE_NFS_S3_CLIENT_BUCKET: cnpmcore-unittest-github-nodejs-${{ matrix.node-version }}
          CNPMCORE_NFS_S3_CLIENT_ENDPOINT: ${{ secrets.CNPMCORE_NFS_S3_ENDPOINT }}
          CNPMCORE_NFS_S3_CLIENT_ID: ${{ secrets.CNPMCORE_NFS_S3_ID }}
          CNPMCORE_NFS_S3_CLIENT_SECRET: ${{ secrets.CNPMCORE_NFS_S3_SECRET }}
          CNPMCORE_NFS_S3_CLIENT_FORCE_PATH_STYLE: true
          # CNPMCORE_NFS_S3_CLIENT_DISABLE_URL: true

      - name: Code Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
